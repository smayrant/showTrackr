{"version":3,"sources":["abstracts/_helpers.scss","base/_reset.scss","abstracts/_mixins.scss","abstracts/_variables.scss","base/_typography.scss","base/_forms.scss"],"names":[],"mappings":"AAYC;EACG,YAAW;EACX,eAAc;EACd,YAAW,EACZ;;AAWH;EACE,mBAAkB;EAClB,WAAU;EACV,YAAW;EACX,aAAY;EACZ,WAAU;EACV,iBAAgB;EAChB,uBAAmB;EACnB,UAAS,EACV;;AAMD;EAGI,iBAAgB;EAChB,YAAW;EACX,aAAY;EACZ,UAAS;EACT,kBAAiB;EACjB,WAAU,EACX;;AAQH;EACE,oBAAmB;EACnB,2BAAuB;KAAvB,wBAAuB;EACvB,iBAAgB,EACjB;;AC3DD;EACC,+BAAsB;UAAtB,uBAAsB,EACtB;;AACD;EACC,4BAAmB;UAAnB,oBAAmB,EACnB;;AAED;EC4FI,oCAAmC;EACnC,mCAAkC;ED3FpC,YEWuB;EFVvB,iBEW6B;EFV7B,8DAAqH;EACrH,iBEeuB,EFdxB;;AAGD;EACE,gBAAe;EACf,aAAY,EACb;;AAGD;EAAe,gBAAe,EAAG;;AAGjC;EACI;IACA,gBAAe;IACf,qBAAoB,EACrB,EAAA;;AG7BH;;;;;;;EAOE,qBDIiC;ECHjC,kBAAiB;EACjB,kBAAiB;EACjB,eDE2B,ECD5B;;AAED;EACE,gBDXsB,ECYvB;;AAED;EACE,gBDdsB,ECevB;;AAED;EACE,gBDjBsB,ECkBvB;;AAED;EACE,gBDpBsB,ECqBvB;;AAED;EACE,gBDvBsB,ECwBvB;;AAED;EACE,gBD1BsB,EC2BvB;;AAED;EACE,gBAAe,EAChB;;AAED;EACE,YDpBsB,ECyBvB;EAND;IAII,sBAAqB,EACtB;;AC9CH;;EAEE,UAAS;EACT,WAAU;EACV,mBAAkB,EACnB;;AAED;;;;;;EAME,yBAAwB;EACxB,yBAAwB;EACxB,+BAAsB;UAAtB,uBAAsB;EACtB,uBFiBiC;EEhBjC,qBFe8C,EEN/C;EAnBD;;;;;;IAaI,mBFcqC,EEbtC;EH+ND;;;;;;IG5NE,YFWuB,EDiNgB;EACzC;;;;;;IAAqB,WAAU;IG7N7B,YFWuB,EDkNmB;EAC5C;;;;;;IG9NE,YFWuB,EDmNM;EAC/B;;;;;;IG/NE,YFWuB,EDoNW;EACpC;;;;;;IGhOE,YFWuB,EDqNC;;AG5N5B;EACE,yBAAwB,EACzB;;AAED;EACE,iBAAgB;EAChB,oBAAmB,EACpB;;AAED;;;;;EAKE,yBAAwB;EACxB,yBAAwB;EACxB,gBAAe,EAChB","file":"style.min.css","sourcesContent":["// This is the most used helpers.\n//\n// You can remove or add your own helpers in this file.\n\n%listreset {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n// clearfix\n%clearfix {\n &:after {\n    content: '';\n    display: block;\n    clear: both;\n  }\n}\n\n.clearfix {\n  @extend %clearfix;\n}\n\n// Only display content to screen readers\n//\n// See: http://a11yproject.com/posts/how-to-hide-content/\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0,0,0,0);\n  border: 0;\n}\n\n// Use in conjunction with .sr-only to only display content when it's focused.\n// Useful for \"Skip to main content\" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1\n// Credit: HTML5 Boilerplate\n\n.sr-only-focusable {\n  &:active,\n  &:focus {\n    position: static;\n    width: auto;\n    height: auto;\n    margin: 0;\n    overflow: visible;\n    clip: auto;\n  }\n}\n\n/// * Helper class to truncate and add ellipsis to a string too long for it to fit\n/// * on a single line.\n/// * 1. Prevent content from wrapping, forcing it on a single line.\n/// * 2. Add ellipsis at the end of the line.\n\n.ellipsis {\n  white-space: nowrap; // 1\n  text-overflow: ellipsis; // 2 \n  overflow: hidden;\n}\n\n","// This is base reset for global components.\n//\n// Note: If you use a framework that includes base styling then you need to remove this file.\n\nhtml {\n\tbox-sizing: border-box;\n}\n*, *:before, *:after {\n\tbox-sizing: inherit;\n}\n\nbody {\n  @include font-smoothing(on);\n  color: map-get($base, 'base-text-color');\n  background: map-get($base, 'base-background-color');\n  font: #{map-get($base, 'base-font-size')}/#{map-get($base, 'base-line-height')} #{map-get($base, 'base-font-family')};\n  min-width: map-get($base, base-min-width);\n}\n\n// adaptive images\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n// google map fix\n.gm-style img {max-width: none;}\n\n// hide tel links on desktop\n@media only screen and (min-width: 1025px) {\n    a[href^=\"tel\"], a[href^=\"skype\"], a[href^=\"sms\"] {\n    cursor: default;\n    pointer-events: none;\n  }\n}","// Most used mixins.\n//\n// Note: If you use a framework (bootstrap, zurb etc.) that includes mixins you can import them too or remove this file.\n\n\n\n// vertical align el inside parent with fixed height/min-height\n// usage \n// html - .parent>.child\n// scss - @include v-align;\n//     or @include v-align(250px);\n//     or @include v-align(250px, bottom, before);\n//\n@mixin v-align($va-height: 100%, $va-direction: middle, $va-pseudo: after) {\n  white-space: nowrap;\n  text-align: center;\n\n  &:#{$va-pseudo} {\n    content: '';\n    display: inline-block;\n    vertical-align: $va-direction;\n    width: 0;\n    min-height: $va-height;\n  }\n\n  > * {\n    white-space: normal;\n    display: inline-block;\n    vertical-align: $va-direction;\n    max-width: 99%;\n  }\n}\n\n// vertical align a pair of child el inside parent\n// usage \n// html - .post>.image+.text\n// scss - @include v-align-pair(image, text);\n//     or @include v-align-pair(image, text, bottom);\n//     or @include v-align-pair(image, text, middle, 200px);\n//\n@mixin v-align-pair($child-name1, $child-name2, $valign: middle, $width1: auto, $width2: auto ) {\n  display: table;\n  .#{$child-name1}{\n    display: table-cell;\n    vertical-align: $valign;\n    width: $width1; \n  }\n  .#{$child-name2} {\n    display: table-cell;\n    vertical-align: $valign;\n    width: $width2;\n  }\n}\n\n\n// vertical align el\n// usage: @include vertical-align-el;\n//\n@mixin vertical-align-el {\n  position: relative;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Mixin helping defining both `width` and `height` simultaneously.\n///\n/// @author Hugo Giraudel\n///\n/// @access public\n///\n/// @param {Length} $width - Element’s `width`\n/// @param {Length} $height ($width) - Element’s `height`\n///\n/// @example scss - Usage\n///   .foo {\n///     @include size(10em);\n///   }\n///\n///   .bar {\n///     @include size(100%, 10em);\n///   }\n///\n/// @example css - CSS output\n///   .foo {\n///     width: 10em;\n///     height: 10em;\n///   }\n///\n///   .bar {\n///     width: 100%;\n///     height: 10em;\n///   }\n///\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// font-smothing\n/// @include font-smoothing(on);\n/// @include font-smoothing(off);\n@mixin font-smoothing($value: on){\n  @if $value == on{\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  @else{\n    -webkit-font-smoothing: subpixel-antialiased;\n    -moz-osx-font-smoothing: auto;\n  }\n}\n\n\n/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.\n///\n/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement\n///\n/// @example scss - Usage\n///   .element {\n///     @include hide-text;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     overflow: hidden;\n///     text-indent: 101%;\n///     white-space: nowrap;\n///   }\n///\n@mixin hide-text {\n  overflow: hidden;\n  text-indent: 101%;\n  white-space: nowrap;\n}\n\n\n/// Creates a visual triangle. \n/// Mixin takes ($size, $color, $direction)\n/// The $size argument can take one or two values—width height.\n/// The $color argument can take one or two \n/// values—foreground-color background-color.\n/// \n/// @author http://bourbon.io/docs/#triangle\n///\n/// $direction: \n/// up, down, left, right, up-right, up-left, down-right, down-left\n/// @example scss - Usage\n///   @include triangle(12px, gray, down);\n///   @include triangle(12px 6px, gray blue, up-left);\n///\n@mixin triangle($size, $color, $direction) {\n  $width: nth($size, 1);\n  $height: nth($size, length($size));\n  $foreground-color: nth($color, 1);\n  $background-color: if(length($color) == 2, nth($color, 2), transparent);\n  height: 0;\n  width: 0;\n\n  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {\n    $width: $width / 2;\n    $height: if(length($size) > 1, $height, $height/2);\n\n    @if $direction == up {\n      border-bottom: $height solid $foreground-color;\n      border-left: $width solid $background-color;\n      border-right: $width solid $background-color;\n    } @else if $direction == right {\n      border-bottom: $width solid $background-color;\n      border-left: $height solid $foreground-color;\n      border-top: $width solid $background-color;\n    } @else if $direction == down {\n      border-left: $width solid $background-color;\n      border-right: $width solid $background-color;\n      border-top: $height solid $foreground-color;\n    } @else if $direction == left {\n      border-bottom: $width solid $background-color;\n      border-right: $height solid $foreground-color;\n      border-top: $width solid $background-color;\n    }\n  } @else if ($direction == up-right) or ($direction == up-left) {\n    border-top: $height solid $foreground-color;\n\n    @if $direction == up-right {\n      border-left: $width solid $background-color;\n    } @else if $direction == up-left {\n      border-right: $width solid $background-color;\n    }\n  } @else if ($direction == down-right) or ($direction == down-left) {\n    border-bottom: $height solid $foreground-color;\n\n    @if $direction == down-right {\n      border-left: $width solid $background-color;\n    } @else if $direction == down-left {\n      border-right: $width solid $background-color;\n    }\n  } @else if ($direction == inset-up) {\n    border-color: $background-color $background-color $foreground-color;\n    border-style: solid;\n    border-width: $height $width;\n  } @else if ($direction == inset-down) {\n    border-color: $foreground-color $background-color $background-color;\n    border-style: solid;\n    border-width: $height $width;\n  } @else if ($direction == inset-right) {\n    border-color: $background-color $background-color $background-color $foreground-color;\n    border-style: solid;\n    border-width: $width $height;\n  } @else if ($direction == inset-left) {\n    border-color: $background-color $foreground-color $background-color $background-color;\n    border-style: solid;\n    border-width: $width $height;\n  }\n}\n\n\n/// Animate css properties\n// usage \n// scss - @include animate(color);\n//     or @include animate(color width);\n//     or @include animate(color width, 1s, linear);\n//\n$animation-speed: 0.3s !default;\n\n@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {\n  $list:();\n  @each $prop in $properties {\n    $str: #{$prop} #{$duration} #{$easing};\n    $list: append($list, $str, comma);\n  }\n  transition: $list;\n}\n\n\n/// Mixin for styling form-placeholders\n/// @example scss - Usage\n///   @include placeholder {\n///    color: #333;\n///   }\n///\n///   input[type='text'],\n///   input[type='tel'],\n///   input[type='email'] {\n///     @include placeholder {\n///      color: red;\n///     }\n///   }\n\n@mixin placeholder {\n  &::-webkit-input-placeholder {@content;}\n  &::-moz-placeholder {opacity: 1; @content;}\n  &:-moz-placeholder {@content;}\n  &:-ms-input-placeholder {@content;}\n  &.placeholder {@content;}\n}\n\n/// Font-size px to rem calc\n/// @example scss - Usage\n/// selector {\n///    @include rem-font-size(16px);\n/// }\n\n@mixin rem-font-size($pxSize) {\n  font-size: $pxSize;\n  font-size: ($pxSize / 10px) + rem;\n}","// Global variables\n//\n// Base font styles for headings and links.\n\n// For headers\n$headings: (\n  'sizes': (\n    'h1-font-size': 30px,\n    'h2-font-size': 27px,\n    'h3-font-size': 24px,\n    'h4-font-size': 21px,\n    'h5-font-size': 17px,\n    'h6-font-size': 15px\n  ),\n  'fonts': (\n    'headings-font-family': inherit,\n    'headings-color': inherit\n  )\n);\n\n// Global vars for body typography\n$base: (\n  'base-font-sans-serif': unquote(\"Arial, 'Helvetica Neue', Helvetica, sans-serif\"),\n  'base-font-serif': unquote(\"'Times New Roman', Times, Baskerville, Georgia, serif\"),\n  'base-text-color': #000,\n  'base-background-color': #fff,\n  'base-link-color':#39f,\n  'base-font-size': 16px,\n  'base-line-height': 1.2,\n  'base-font-family': unquote(\"Arial, 'Helvetica Neue', Helvetica, sans-serif\"),\n  'vertical-rhythm': '(map-get($base, base-line-height) * 1em)',\n  'base-min-width': 320px\n);\n\n// Vars for forms\n$forms: (\n  'form-element-padding': unquote(\"0.4em 0.7em\"),\n  'form-element-border-color': #999,\n  'form-element-focus-border-color': #000,\n  'placeholder-color': #999\n);\n\n// Breakpoints for include media mixin\n$breakpoints: (\n  'phone': 480px,\n  'tablet': 768px,\n  'desktop': 980px,\n  'widescreen': 1200px\n);\n\n// Keywords for include media mixin\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 2.5), (min-resolution: 240dpi)'\n);","// Typography\n//\n// Base font styles for headings and links.\n\nh1, .h1,\nh2, .h2,\nh3, .h3,\nh4, .h4,\nh5, .h5,\nh6, .h6,\n.h {\n  font-family: map-deep-get($headings, 'fonts', 'headings-font-family');\n  font-weight: bold;\n  margin: 0 0 0.5em;\n  color: map-deep-get($headings, 'fonts', 'headings-color');\n}\n\nh1, .h1 {\n  font-size: map-deep-get($headings, 'sizes', 'h1-font-size');\n}\n\nh2, .h2 {\n  font-size: map-deep-get($headings, 'sizes', 'h2-font-size');\n}\n\nh3, .h3 {\n  font-size: map-deep-get($headings, 'sizes', 'h3-font-size');\n}\n\nh4, .h4 {\n  font-size: map-deep-get($headings, 'sizes', 'h4-font-size');\n}\n\nh5, .h5 {\n  font-size: map-deep-get($headings, 'sizes', 'h5-font-size');\n}\n\nh6, .h6 {\n  font-size: map-deep-get($headings, 'sizes', 'h6-font-size');\n}\n\np {\n  margin: 0 0 1em;\n}\n\na {\n  color: map-get($base, 'base-link-color');\n  &:hover,\n  &:focus {\n    text-decoration: none;\n  }\n}","// This is base reset for form elements.\n//\n// Note: If you use a framework that includes form styling then you need to remove this file.\n\nform,\nfieldset {\n  margin: 0;\n  padding: 0;\n  border-style: none;\n}\n\ninput[type='text'],\ninput[type='tel'],\ninput[type='email'],\ninput[type='search'],\ninput[type='password'],\ntextarea {\n  -webkit-appearance: none;\n  -webkit-border-radius: 0;\n  box-sizing: border-box;\n  border: 1px solid map-get($forms, 'form-element-border-color');\n  padding: map-get($forms, 'form-element-padding');\n\n  &:focus {\n    border-color: map-get($forms, 'form-element-focus-border-color');\n  }\n\n  @include placeholder {\n    color: map-get($forms, 'placeholder-color');\n  }\n}\n\nselect {\n  -webkit-border-radius: 0;\n}\n\ntextarea {\n  resize: vertical;\n  vertical-align: top;\n}\n\nbutton,\ninput[type='button'],\ninput[type='reset'],\ninput[type='file'],\ninput[type='submit'] {\n  -webkit-appearance: none;\n  -webkit-border-radius: 0;\n  cursor: pointer;\n}"]}